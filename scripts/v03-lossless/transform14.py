import torch
from torch import nn

class NLTransform(nn.Module):
	def __init__(self):
		super(NLTransform, self).__init__()
		#Conv2d:		Dout = floor((Din + 2*padding - dilation*(kernel-1) - 1)/stride + 1)
		#ConvTranspose2d:	Dout = (Din-1)*stride - 2*padding + dilation*(kernel-1) + output_padding + 1
		self.activ=nn.LeakyReLU()
		self.dnsmp=nn.AvgPool2d(2)
		self.upsmp=nn.Upsample(scale_factor=2)

		#T14: downsample
		self.nOptions=4

		self.a_conv01=nn.Conv2d(  3+self.nOptions, 32, 3, 1, 1)
		self.a_conv02=nn.Conv2d( 32,  32, 3, 1, 1)
		self.a_conv03=nn.Conv2d( 32,  32, 3, 1, 1)
		self.a_conv04=nn.Conv2d( 32,  32, 3, 1, 1)
		self.a_conv05=nn.Conv2d( 32,  32, 3, 1, 1)
		self.a_conv06=nn.Conv2d( 32,  32, 3, 1, 1)
		self.a_conv07=nn.Conv2d( 32,  32, 3, 1, 1)
		self.a_conv08=nn.Conv2d( 32,  32, 3, 1, 1)
		self.a_bump01=nn.Conv2d( 32,  64, 1, 1, 0)
		self.a_conv09=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_conv10=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_conv11=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_conv12=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_conv13=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_conv14=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_conv15=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_conv16=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.a_bump02=nn.Conv2d( 64, 128, 1, 1, 0)
		self.a_conv17=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.a_conv18=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.a_conv19=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.a_conv20=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.a_conv21=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.a_conv22=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.a_conv23=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.a_conv24=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		#self.a_bump03=nn.Conv2d(128, 256, 1, 1, 0)
		#self.a_conv25=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_conv26=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_conv27=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_conv28=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_conv29=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_conv30=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_conv31=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_conv32=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.a_bump04=nn.Conv2d(256, 512, 1, 1, 0)
		#self.a_conv33=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.a_conv34=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.a_conv35=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.a_conv36=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.a_conv37=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.a_conv38=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.a_conv39=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.a_conv40=nn.Conv2d(512, 512, 3, 1, 1, groups=16)

		self.s_conv40=nn.Conv2d( 32,   3, 3, 1, 1)
		self.s_conv39=nn.Conv2d( 32,  32, 3, 1, 1)
		self.s_conv38=nn.Conv2d( 32,  32, 3, 1, 1)
		self.s_conv37=nn.Conv2d( 32,  32, 3, 1, 1)
		self.s_conv36=nn.Conv2d( 32,  32, 3, 1, 1)
		self.s_conv35=nn.Conv2d( 32,  32, 3, 1, 1)
		self.s_conv34=nn.Conv2d( 32,  32, 3, 1, 1)
		self.s_conv33=nn.Conv2d( 32,  32, 3, 1, 1)
		self.s_bump04=nn.Conv2d( 64,  32, 1, 1, 0)
		self.s_conv32=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_conv31=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_conv30=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_conv29=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_conv28=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_conv27=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_conv26=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_conv25=nn.Conv2d( 64,  64, 3, 1, 1, groups=2)
		self.s_bump03=nn.Conv2d(128,  64, 1, 1, 0)
		self.s_conv24=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.s_conv23=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.s_conv22=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.s_conv21=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.s_conv20=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.s_conv19=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.s_conv18=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		self.s_conv17=nn.Conv2d(128, 128, 3, 1, 1, groups=4)
		#self.s_bump02=nn.Conv2d(256, 128, 1, 1, 0)
		#self.s_conv16=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_conv15=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_conv14=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_conv13=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_conv12=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_conv11=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_conv10=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_conv09=nn.Conv2d(256, 256, 3, 1, 1, groups=8)
		#self.s_bump01=nn.Conv2d(512, 256, 1, 1, 0)
		#self.s_conv08=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_conv07=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_conv06=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_conv05=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_conv04=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_conv03=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_conv02=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_conv01=nn.Conv2d(512, 512, 3, 1, 1, groups=16)
		#self.s_bump00=nn.Conv2d(512+self.nOptions, 512, 1, 1, 0)
		self.s_bump00=nn.Conv2d(128+self.nOptions, 128, 1, 1, 0)

	#def prep_rate(self, option, shape, device):#returns (ratedata, nbits, downsample)
	#	rate=torch.empty(shape[0]).fill_(option).long()
	#	rate=nn.functional.one_hot(rate, self.nOptions)
	#	rate=rate.float().to(device)
	#	rate=torch.squeeze(rate, dim=1)
	#	rate=rate[:, :, None, None]
	#	return rate.expand(-1, -1, shape[2], shape[3]), option+1, self.get_bpp(option)

	def get_bpp(self, nbits):
		return nbits*(128*16*16)/(64*64*3)

	def prep_input(self, x, nbits, device):
		rateinfo=torch.empty(1).fill_(nbits-1).long()
		rateinfo=nn.functional.one_hot(rateinfo, self.nOptions).float().to(device)
		rateinfo=rateinfo[None, None]
		rateinfo=rateinfo.expand(x.shape[0], x.shape[2], x.shape[3], -1)
		rateinfo=rateinfo.transpose(1, 3)
		x=torch.cat((x, rateinfo), dim=1)
		return x

	def encode(self, x, nbits, device):# no nonlinearity after last operation
		x=self.prep_input(x, nbits, device)
		
		t=self.activ(self.a_conv01(x))
		x=self.activ(self.a_conv02(t))
		x=self.activ(self.a_conv03(x))
		t=self.activ(self.a_conv04(x)+t)
		x=self.activ(self.a_conv05(t))
		x=self.activ(self.a_conv06(x))
		x=self.activ(self.a_conv07(x))
		t=self.activ(self.a_conv08(x)+t)
		t=self.activ(self.a_bump01(self.dnsmp(t)))
		x=self.activ(self.a_conv09(t))
		x=self.activ(self.a_conv10(x))
		x=self.activ(self.a_conv11(x))
		t=self.activ(self.a_conv12(x)+t)
		x=self.activ(self.a_conv13(t))
		x=self.activ(self.a_conv14(x))
		x=self.activ(self.a_conv15(x))
		t=self.activ(self.a_conv16(x)+t)
		t=self.activ(self.a_bump02(self.dnsmp(t)))
		x=self.activ(self.a_conv17(t))
		x=self.activ(self.a_conv18(x))
		x=self.activ(self.a_conv19(x))
		t=self.activ(self.a_conv20(x)+t)
		x=self.activ(self.a_conv21(t))
		x=self.activ(self.a_conv22(x))
		x=self.activ(self.a_conv23(x))
		t=self.activ(self.a_conv24(x)+t)
		return t
		#t=self.activ(self.a_bump03(self.dnsmp(t)))
		#x=self.activ(self.a_conv25(t))
		#x=self.activ(self.a_conv26(x))
		#x=self.activ(self.a_conv27(x))
		#t=self.activ(self.a_conv28(x)+t)
		#x=self.activ(self.a_conv29(t))
		#x=self.activ(self.a_conv30(x))
		#x=self.activ(self.a_conv31(x))
		#t=self.activ(self.a_conv32(x)+t)
		#t=self.activ(self.a_bump04(self.dnsmp(t)))
		#x=self.activ(self.a_conv33(t))
		#x=self.activ(self.a_conv34(x))
		#x=self.activ(self.a_conv35(x))
		#t=self.activ(self.a_conv36(x)+t)
		#x=self.activ(self.a_conv37(t))
		#x=self.activ(self.a_conv38(x))
		#t=self.activ(self.a_conv39(x)+t)
		#x=self.a_conv40(t)
		#return x

	def decode(self, x, nbits, device):# clamp [0, 1] after last operation
		x=self.prep_input(x, nbits, device)
		
		t=self.activ(self.s_bump00(x))
		#t=self.activ(self.s_conv01(x))
		#x=self.activ(self.s_conv02(t))
		#x=self.activ(self.s_conv03(x))
		#t=self.activ(self.s_conv04(x)+t)
		#x=self.activ(self.s_conv05(t))
		#x=self.activ(self.s_conv06(x))
		#x=self.activ(self.s_conv07(x))
		#t=self.activ(self.s_conv08(x)+t)
		#t=self.activ(self.s_bump01(self.upsmp(t)))
		#x=self.activ(self.s_conv09(t))
		#x=self.activ(self.s_conv10(x))
		#x=self.activ(self.s_conv11(x))
		#t=self.activ(self.s_conv12(x)+t)
		#x=self.activ(self.s_conv13(t))
		#x=self.activ(self.s_conv14(x))
		#x=self.activ(self.s_conv15(x))
		#t=self.activ(self.s_conv16(x)+t)
		#t=self.activ(self.s_bump02(self.upsmp(t)))
		x=self.activ(self.s_conv17(t))
		x=self.activ(self.s_conv18(x))
		x=self.activ(self.s_conv19(x))
		t=self.activ(self.s_conv20(x)+t)
		x=self.activ(self.s_conv21(t))
		x=self.activ(self.s_conv22(x))
		x=self.activ(self.s_conv23(x))
		t=self.activ(self.s_conv24(x)+t)
		t=self.activ(self.s_bump03(self.upsmp(t)))
		x=self.activ(self.s_conv25(t))
		x=self.activ(self.s_conv26(x))
		x=self.activ(self.s_conv27(x))
		t=self.activ(self.s_conv28(x)+t)
		x=self.activ(self.s_conv29(t))
		x=self.activ(self.s_conv30(x))
		x=self.activ(self.s_conv31(x))
		t=self.activ(self.s_conv32(x)+t)
		t=self.activ(self.s_bump04(self.upsmp(t)))
		x=self.activ(self.s_conv33(t))
		x=self.activ(self.s_conv34(x))
		x=self.activ(self.s_conv35(x))
		t=self.activ(self.s_conv36(x)+t)
		x=self.activ(self.s_conv37(t))
		x=self.activ(self.s_conv38(x))
		t=self.activ(self.s_conv39(x)+t)
		x=self.s_conv40(t)
		x=torch.clamp(x, min=0, max=1)
		return x
